"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6682],{2365:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>o});var a=e(4848),d=e(8453);const s={},i=void 0,r={id:"cpp/variant",title:"variant",description:"std: a more perfect union",source:"@site/docs/cpp/variant.md",sourceDirName:"cpp",slug:"/cpp/variant",permalink:"/docs/cpp/variant",draft:!1,unlisted:!1,editUrl:"https://github.com/1036-ce/1036-ce.github.io/blob/main/docs/cpp/variant.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"user-defined-literals",permalink:"/docs/cpp/user-defined-literals"},next:{title:"cron",permalink:"/docs/cron"}},c={},o=[{value:"std::variant : a more perfect union",id:"stdvariant--a-more-perfect-union",level:2},{value:"\u6210\u5458\u51fd\u6570",id:"\u6210\u5458\u51fd\u6570",level:3},{value:"\u975e\u6210\u5458\u51fd\u6570",id:"\u975e\u6210\u5458\u51fd\u6570",level:3}];function l(t){const n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,d.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"stdvariant--a-more-perfect-union",children:"std::variant : a more perfect union"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"// in c++14 without std::variant\nstruct Staff {\n    union Data {\n        int i;\n        double d;\n        string s;\n    } data;\n    enum Type { INT, DOUBLE, STRING } type;\n};\n\n// in c++17 with std::variant\nstruct Staff {\n    std::variant<int, double, string> data;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"\u6210\u5458\u51fd\u6570",children:"\u6210\u5458\u51fd\u6570"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'// index()\nstd::variant<int, double, std::string> data;\ndata = 1;           // data.index() == 0\nstd::cout << data.index() << std::endl;\ndata = 1.f;         // data.index() == 1\nstd::cout << data.index() << std::endl;\ndata = "123123";    // data.index() == 2\nstd::cout << data.index() << std::endl;\n\n// valueless_by_exception()\n\n// emplace()\nstd::variant<int, double, std::string> data;\ndata.emplace<int>(33);\nstd::cout << std::get<int>(data) << std::endl;\ndata.emplace<0>(22);\nstd::cout << std::get<int>(data) << std::endl;\n\n// swap()\nstd::variant<int, double, std::string> data, \nstd::variant<int, double, std::string> tmp;     // here, tmp is initialized as int value, so tmp == 0\ndata.emplace<1>(33.f);\nstd::cout << std::get<double>(data) << std::endl;   // 33\nstd::cout << std::get<0>(tmp) << std::endl;         // 0\n// ===============\ndata.swap(tmp);\n// ===============\nstd::cout << std::get<double>(tmp) << std::endl;    // 33\nstd::cout << std::get<0>(data) << std::endl;        // 0\n'})}),"\n",(0,a.jsx)(n.h3,{id:"\u975e\u6210\u5458\u51fd\u6570",children:"\u975e\u6210\u5458\u51fd\u6570"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'// std::get\nstd::variant<int, double, std::string> data;\ndata = "123123"\nstd::get<2>(data);              // "123123"\nstd::get<std::string>(data);    // "123123"\n\n// throw an error\nstd::get<1>(data)\n// throw an error\nstd::get<int>(data)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"// std::get_if()\n// \u53c2\u6570\u4e3astd::variant\u7c7b\u578b\u53d8\u91cf\u7684\u6307\u9488\n// \u8fd4\u56de\u6307\u5411\u503c\u7684\u6307\u9488\uff0c\u51fa\u9519\u65f6\u8fd4\u56denullptr\n\nstd::variant<int, double, std::string> data;\ndata = 12;\nauto p1 = std::get_if<2>(&data);\nassert(p1 == nullptr);\nauto p2 = std::get_if<int>(&data);\nassert(*p2 == 12);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'// std::visit()\n\nusing var_t = std::variant<int, double, std::string>;\nstd::variant<int, double, std::string> data;\ndata = "123123";\n\nstd::visit([](auto &&arg) { std::cout << arg << std::endl; }, data);\n\nvar_t val = std::visit([](auto &&arg) -> var_t { return arg + arg; }, data);\n\nstd::cout << std::get<std::string>(val) << std::endl;\n\nstd::visit(\n    [](auto &&v) {\n        using T = std::remove_cvref_t<decltype(v)>;\n\n        if constexpr (std::is_same_v<T, int>) {\n            std::cout << "value is an integer: " << v << std::endl;\n        } else if constexpr (std::is_same_v<T, double>) {\n            std::cout << "value is a double: " << v << std::endl;\n        } else {\n            std::cout << "testet" << std::endl;\n        }\n    },\n    ret);\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'// holds_alternative<typename T>(std::variant)\n// \u68c0\u67e5\u662f\u5426\u4e00\u4e2astd::variat\u7c7b\u578b\u7684\u53d8\u91cf\u542b\u6709\u6307\u5b9a\u7684\u7c7b\u578b\u7684\u503c\n\nstd::variant<int, std::string> v = "abc";\nassert(std::holds_alternative<int>(v) == false);\nassert(std::holds_alternative<std::string>(v) == true);\n'})})]})}function u(t={}){const{wrapper:n}={...(0,d.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(l,{...t})}):l(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>i,x:()=>r});var a=e(6540);const d={},s=a.createContext(d);function i(t){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function r(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(d):t.components||d:i(t.components),a.createElement(s.Provider,{value:n},t.children)}}}]);